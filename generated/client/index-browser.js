
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleGloballyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  flags: 'flags',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  supabaseId: 'supabaseId',
  fullName: 'fullName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  bannerUrl: 'bannerUrl',
  color: 'color',
  phoneNumber: 'phoneNumber',
  flags: 'flags',
  status: 'status',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  roleId: 'roleId',
  timezone: 'timezone',
  locale: 'locale',
  subscribersCount: 'subscribersCount',
  subscriptionsCount: 'subscriptionsCount',
  videosCount: 'videosCount',
  postsCount: 'postsCount',
  totalViews: 'totalViews',
  totalLikes: 'totalLikes',
  reputation: 'reputation'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  deviceVersion: 'deviceVersion',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  flags: 'flags',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  ratchetState: 'ratchetState',
  sessionKey: 'sessionKey',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  flags: 'flags'
};

exports.Prisma.UserCryptoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  identityKeyPublic: 'identityKeyPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SignedPreKeyScalarFieldEnum = {
  id: 'id',
  userCryptoId: 'userCryptoId',
  keyId: 'keyId',
  publicKey: 'publicKey',
  signature: 'signature',
  createdAt: 'createdAt',
  flags: 'flags',
  expiresAt: 'expiresAt'
};

exports.Prisma.OneTimePreKeyScalarFieldEnum = {
  id: 'id',
  userCryptoId: 'userCryptoId',
  keyId: 'keyId',
  publicKey: 'publicKey',
  createdAt: 'createdAt',
  flags: 'flags'
};

exports.Prisma.UsedOneTimePreKeyScalarFieldEnum = {
  id: 'id',
  userCryptoId: 'userCryptoId',
  keyId: 'keyId',
  usedAt: 'usedAt'
};

exports.Prisma.SecurityAuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  timestamp: 'timestamp',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  avatarUrl: 'avatarUrl',
  bannerUrl: 'bannerUrl',
  color: 'color',
  flags: 'flags',
  inviteLink: 'inviteLink',
  memberCount: 'memberCount',
  lastMessageAt: 'lastMessageAt',
  lastMessageText: 'lastMessageText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  pinnedMessageId: 'pinnedMessageId'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  flags: 'flags',
  mutedUntil: 'mutedUntil'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  content: 'content',
  header: 'header',
  messageType: 'messageType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  editedAt: 'editedAt',
  flags: 'flags',
  deletedAt: 'deletedAt',
  replyToId: 'replyToId',
  forwardedFromId: 'forwardedFromId',
  threadId: 'threadId',
  replyDepth: 'replyDepth'
};

exports.Prisma.MessageThreadScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  creatorId: 'creatorId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  flags: 'flags'
};

exports.Prisma.MessageEditScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  content: 'content',
  editedAt: 'editedAt'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fileName: 'fileName',
  mimeType: 'mimeType',
  fileHash: 'fileHash',
  fileKey: 'fileKey',
  fileIV: 'fileIV',
  fileSize: 'fileSize',
  fileType: 'fileType',
  thumbnail: 'thumbnail',
  description: 'description',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  reaction: 'reaction',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.StickerPackScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  authorId: 'authorId',
  thumbnailUrl: 'thumbnailUrl',
  flags: 'flags',
  price: 'price',
  category: 'category',
  tags: 'tags',
  downloadCount: 'downloadCount',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StickerScalarFieldEnum = {
  id: 'id',
  packId: 'packId',
  emoji: 'emoji',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  width: 'width',
  height: 'height',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  flags: 'flags',
  usageCount: 'usageCount',
  position: 'position',
  createdAt: 'createdAt'
};

exports.Prisma.CustomEmojiScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  authorId: 'authorId',
  name: 'name',
  fileUrl: 'fileUrl',
  width: 'width',
  height: 'height',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  flags: 'flags',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GifCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  flags: 'flags',
  position: 'position',
  gifCount: 'gifCount',
  createdAt: 'createdAt'
};

exports.Prisma.GifScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  title: 'title',
  url: 'url',
  previewUrl: 'previewUrl',
  width: 'width',
  height: 'height',
  fileSize: 'fileSize',
  duration: 'duration',
  tags: 'tags',
  searchText: 'searchText',
  flags: 'flags',
  usageCount: 'usageCount',
  createdAt: 'createdAt'
};

exports.Prisma.MessageStickerScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  stickerId: 'stickerId'
};

exports.Prisma.MessageEmojiScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  emojiId: 'emojiId'
};

exports.Prisma.MessageGifScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  gifId: 'gifId'
};

exports.Prisma.StickerPurchaseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  packId: 'packId',
  price: 'price',
  currency: 'currency',
  createdAt: 'createdAt'
};

exports.Prisma.UserStickerPackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  packId: 'packId',
  position: 'position',
  flags: 'flags',
  addedAt: 'addedAt'
};

exports.Prisma.ChatFolderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  color: 'color',
  iconUrl: 'iconUrl',
  flags: 'flags',
  position: 'position',
  filters: 'filters',
  chatCount: 'chatCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatFolderItemScalarFieldEnum = {
  id: 'id',
  folderId: 'folderId',
  chatId: 'chatId',
  position: 'position',
  flags: 'flags',
  addedAt: 'addedAt'
};

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  type: 'type',
  status: 'status',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  flags: 'flags',
  metadata: 'metadata',
  viewsCount: 'viewsCount',
  likesCount: 'likesCount',
  dislikesCount: 'dislikesCount',
  sharesCount: 'sharesCount',
  commentsCount: 'commentsCount',
  publishedAt: 'publishedAt',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ContentAttachmentScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  url: 'url',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  authorId: 'authorId',
  parentId: 'parentId',
  text: 'text',
  flags: 'flags',
  likesCount: 'likesCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentId: 'contentId',
  commentId: 'commentId',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  flags: 'flags',
  usageCount: 'usageCount',
  createdAt: 'createdAt'
};

exports.Prisma.ContentTagScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  tagId: 'tagId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  subscriberId: 'subscriberId',
  subscribedToId: 'subscribedToId',
  flags: 'flags',
  createdAt: 'createdAt'
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  flags: 'flags',
  itemsCount: 'itemsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlaylistItemScalarFieldEnum = {
  id: 'id',
  playlistId: 'playlistId',
  contentId: 'contentId',
  position: 'position',
  addedAt: 'addedAt'
};

exports.Prisma.WatchHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentId: 'contentId',
  watchedAt: 'watchedAt',
  watchTime: 'watchTime',
  completed: 'completed',
  progress: 'progress'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  flags: 'flags',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.ForumScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  flags: 'flags',
  settings: 'settings',
  categoriesCount: 'categoriesCount',
  postsCount: 'postsCount',
  topicsCount: 'topicsCount',
  repliesCount: 'repliesCount',
  usersCount: 'usersCount',
  lastPostAt: 'lastPostAt',
  lastPostId: 'lastPostId',
  lastActivityAt: 'lastActivityAt',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumModeratorScalarFieldEnum = {
  id: 'id',
  forumId: 'forumId',
  userId: 'userId',
  permissions: 'permissions',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.ForumCategoryModeratorScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  userId: 'userId',
  permissions: 'permissions',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.ForumConfigurationScalarFieldEnum = {
  id: 'id',
  forumId: 'forumId',
  key: 'key',
  value: 'value',
  type: 'type',
  description: 'description',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumTopicTrackerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  lastRead: 'lastRead',
  readCount: 'readCount'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  forumId: 'forumId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  icon: 'icon',
  position: 'position',
  parentId: 'parentId',
  level: 'level',
  flags: 'flags',
  postsCount: 'postsCount',
  repliesCount: 'repliesCount',
  topicsCount: 'topicsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCategoryPermissionScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  roleId: 'roleId',
  permissions: 'permissions',
  createdAt: 'createdAt'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  slug: 'slug',
  flags: 'flags',
  viewsCount: 'viewsCount',
  repliesCount: 'repliesCount',
  likesCount: 'likesCount',
  dislikesCount: 'dislikesCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastReplyAt: 'lastReplyAt',
  lastReplyBy: 'lastReplyBy'
};

exports.Prisma.ForumReplyScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  flags: 'flags',
  likesCount: 'likesCount',
  dislikesCount: 'dislikesCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumVoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  replyId: 'replyId',
  value: 'value',
  createdAt: 'createdAt'
};

exports.Prisma.ForumSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  flags: 'flags',
  createdAt: 'createdAt'
};

exports.Prisma.ForumTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  usageCount: 'usageCount',
  flags: 'flags',
  createdAt: 'createdAt'
};

exports.Prisma.ForumPostTagScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  tagId: 'tagId'
};

exports.Prisma.ForumAttachmentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  replyId: 'replyId',
  fileName: 'fileName',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ForumModerationLogScalarFieldEnum = {
  id: 'id',
  moderatorId: 'moderatorId',
  targetUserId: 'targetUserId',
  postId: 'postId',
  replyId: 'replyId',
  action: 'action',
  reason: 'reason',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  userId: 'userId',
  contentId: 'contentId',
  postId: 'postId',
  replyId: 'replyId',
  messageId: 'messageId',
  reason: 'reason',
  status: 'status',
  description: 'description',
  flags: 'flags',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  resolution: 'resolution',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isRevoked: 'isRevoked'
};

exports.Prisma.RefreshTokenBlacklistScalarFieldEnum = {
  id: 'id',
  tokenHash: 'tokenHash',
  userId: 'userId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ContactListScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  displayName: 'displayName',
  phoneNumber: 'phoneNumber',
  addedAt: 'addedAt',
  flags: 'flags'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  uiSettings: 'uiSettings',
  notifications: 'notifications',
  privacy: 'privacy',
  security: 'security',
  dataStorage: 'dataStorage',
  content: 'content',
  experimental: 'experimental',
  blockedUsers: 'blockedUsers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatSettingsScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  notificationType: 'notificationType',
  flags: 'flags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostSEOScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  metaTitle: 'metaTitle',
  metaDesc: 'metaDesc',
  keywords: 'keywords',
  canonicalUrl: 'canonicalUrl',
  ogImage: 'ogImage',
  schema: 'schema',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumReputationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  level: 'level',
  badges: 'badges',
  postsCreated: 'postsCreated',
  repliesCreated: 'repliesCreated',
  likesReceived: 'likesReceived',
  likesGiven: 'likesGiven',
  bestAnswers: 'bestAnswers',
  moderationScore: 'moderationScore',
  lastCalculated: 'lastCalculated'
};

exports.Prisma.ForumHotTopicsScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  score: 'score',
  position: 'position',
  period: 'period',
  region: 'region',
  calculatedAt: 'calculatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ForumAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  forumId: 'forumId',
  categoryId: 'categoryId',
  newPosts: 'newPosts',
  newReplies: 'newReplies',
  newUsers: 'newUsers',
  totalViews: 'totalViews',
  uniqueVisitors: 'uniqueVisitors',
  avgSessionTime: 'avgSessionTime',
  likesGiven: 'likesGiven',
  sharesCount: 'sharesCount',
  searchQueries: 'searchQueries',
  reportsCreated: 'reportsCreated',
  actionsPerformed: 'actionsPerformed'
};

exports.Prisma.ForumNotificationQueueScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  entityType: 'entityType',
  entityId: 'entityId',
  isRead: 'isRead',
  isEmail: 'isEmail',
  isPush: 'isPush',
  title: 'title',
  message: 'message',
  data: 'data',
  createdAt: 'createdAt',
  sentAt: 'sentAt',
  readAt: 'readAt'
};

exports.Prisma.ChatStatsCacheScalarFieldEnum = {
  chatId: 'chatId',
  messageCount: 'messageCount',
  participantCount: 'participantCount',
  lastActivity: 'lastActivity',
  storageBytes: 'storageBytes',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.UserStatsCacheScalarFieldEnum = {
  userId: 'userId',
  messagesSent: 'messagesSent',
  chatsCount: 'chatsCount',
  contactsCount: 'contactsCount',
  storageUsed: 'storageUsed',
  lastActivity: 'lastActivity',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ContentStatsCacheScalarFieldEnum = {
  contentId: 'contentId',
  hourlyViews: 'hourlyViews',
  dailyViews: 'dailyViews',
  demographics: 'demographics',
  engagement: 'engagement',
  revenue: 'revenue',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.MessageArchiveScalarFieldEnum = {
  id: 'id',
  originalId: 'originalId',
  chatId: 'chatId',
  senderId: 'senderId',
  content: 'content',
  messageType: 'messageType',
  createdAt: 'createdAt',
  archiveDate: 'archiveDate',
  compressionType: 'compressionType'
};

exports.Prisma.ContentArchiveScalarFieldEnum = {
  id: 'id',
  originalId: 'originalId',
  authorId: 'authorId',
  type: 'type',
  metadata: 'metadata',
  archiveDate: 'archiveDate',
  archiveReason: 'archiveReason',
  compressionType: 'compressionType'
};

exports.Prisma.SearchCacheScalarFieldEnum = {
  queryHash: 'queryHash',
  results: 'results',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  hitCount: 'hitCount'
};

exports.Prisma.TrendingCacheScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  region: 'region',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.RoleGloballyOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  username: 'username',
  supabaseId: 'supabaseId',
  fullName: 'fullName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  bannerUrl: 'bannerUrl',
  color: 'color',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  locale: 'locale'
};

exports.Prisma.DeviceOrderByRelevanceFieldEnum = {
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  deviceVersion: 'deviceVersion',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  sessionKey: 'sessionKey'
};

exports.Prisma.UserCryptoOrderByRelevanceFieldEnum = {
  identityKeyPublic: 'identityKeyPublic'
};

exports.Prisma.SignedPreKeyOrderByRelevanceFieldEnum = {
  publicKey: 'publicKey',
  signature: 'signature'
};

exports.Prisma.OneTimePreKeyOrderByRelevanceFieldEnum = {
  publicKey: 'publicKey'
};

exports.Prisma.SecurityAuditLogOrderByRelevanceFieldEnum = {
  eventType: 'eventType',
  severity: 'severity',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.ChatOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  avatarUrl: 'avatarUrl',
  bannerUrl: 'bannerUrl',
  color: 'color',
  inviteLink: 'inviteLink',
  lastMessageText: 'lastMessageText'
};

exports.Prisma.MessageThreadOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.MessageAttachmentOrderByRelevanceFieldEnum = {
  fileName: 'fileName',
  mimeType: 'mimeType',
  fileHash: 'fileHash',
  fileKey: 'fileKey',
  fileIV: 'fileIV',
  fileType: 'fileType',
  thumbnail: 'thumbnail',
  description: 'description',
  url: 'url'
};

exports.Prisma.MessageReactionOrderByRelevanceFieldEnum = {
  reaction: 'reaction'
};

exports.Prisma.StickerPackOrderByRelevanceFieldEnum = {
  name: 'name',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  category: 'category',
  tags: 'tags'
};

exports.Prisma.StickerOrderByRelevanceFieldEnum = {
  emoji: 'emoji',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  mimeType: 'mimeType'
};

exports.Prisma.CustomEmojiOrderByRelevanceFieldEnum = {
  name: 'name',
  fileUrl: 'fileUrl',
  mimeType: 'mimeType'
};

exports.Prisma.GifCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.GifOrderByRelevanceFieldEnum = {
  title: 'title',
  url: 'url',
  previewUrl: 'previewUrl',
  tags: 'tags',
  searchText: 'searchText'
};

exports.Prisma.StickerPurchaseOrderByRelevanceFieldEnum = {
  currency: 'currency'
};

exports.Prisma.ChatFolderOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  iconUrl: 'iconUrl'
};

exports.Prisma.ContentOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl'
};

exports.Prisma.ContentAttachmentOrderByRelevanceFieldEnum = {
  url: 'url',
  mimeType: 'mimeType'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  text: 'text'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.PlaylistOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message'
};

exports.Prisma.ForumOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl'
};

exports.Prisma.ForumConfigurationOrderByRelevanceFieldEnum = {
  key: 'key',
  value: 'value',
  type: 'type',
  description: 'description'
};

exports.Prisma.ForumCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  icon: 'icon'
};

exports.Prisma.ForumPostOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content',
  slug: 'slug'
};

exports.Prisma.ForumReplyOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.ForumTagOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color'
};

exports.Prisma.ForumAttachmentOrderByRelevanceFieldEnum = {
  fileName: 'fileName',
  originalName: 'originalName',
  mimeType: 'mimeType',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl'
};

exports.Prisma.ForumModerationLogOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.ReportOrderByRelevanceFieldEnum = {
  description: 'description',
  resolution: 'resolution'
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  token: 'token',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.RefreshTokenBlacklistOrderByRelevanceFieldEnum = {
  tokenHash: 'tokenHash'
};

exports.Prisma.ContactListOrderByRelevanceFieldEnum = {
  displayName: 'displayName',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.NotificationSettingsOrderByRelevanceFieldEnum = {
  notificationType: 'notificationType'
};

exports.Prisma.ForumPostSEOOrderByRelevanceFieldEnum = {
  metaTitle: 'metaTitle',
  metaDesc: 'metaDesc',
  keywords: 'keywords',
  canonicalUrl: 'canonicalUrl',
  ogImage: 'ogImage'
};

exports.Prisma.ForumHotTopicsOrderByRelevanceFieldEnum = {
  period: 'period',
  region: 'region'
};

exports.Prisma.ForumNotificationQueueOrderByRelevanceFieldEnum = {
  type: 'type',
  entityType: 'entityType',
  title: 'title',
  message: 'message'
};

exports.Prisma.MessageArchiveOrderByRelevanceFieldEnum = {
  compressionType: 'compressionType'
};

exports.Prisma.ContentArchiveOrderByRelevanceFieldEnum = {
  archiveReason: 'archiveReason',
  compressionType: 'compressionType'
};

exports.Prisma.SearchCacheOrderByRelevanceFieldEnum = {
  queryHash: 'queryHash'
};

exports.Prisma.TrendingCacheOrderByRelevanceFieldEnum = {
  type: 'type',
  region: 'region'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BANNED: 'BANNED',
  DELETED: 'DELETED',
  RESTRICTED: 'RESTRICTED'
};

exports.ChatType = exports.$Enums.ChatType = {
  PRIVATE: 'PRIVATE',
  GROUP: 'GROUP',
  CHANNEL: 'CHANNEL',
  COMMUNITY: 'COMMUNITY'
};

exports.ChatRole = exports.$Enums.ChatRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER',
  SUBSCRIBER: 'SUBSCRIBER'
};

exports.MessageType = exports.$Enums.MessageType = {
  SYSTEM: 'SYSTEM',
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE',
  DOCUMENT: 'DOCUMENT',
  STICKER: 'STICKER',
  VOICE: 'VOICE',
  VIDEO_NOTE: 'VIDEO_NOTE',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT',
  POLL: 'POLL',
  DICE: 'DICE',
  GAME: 'GAME',
  EMOJI: 'EMOJI',
  GIF: 'GIF',
  MARKDOWN: 'MARKDOWN',
  CUSTOM_EMOJI: 'CUSTOM_EMOJI',
  STICKER_PACK: 'STICKER_PACK'
};

exports.ContentType = exports.$Enums.ContentType = {
  VIDEO: 'VIDEO',
  SHORT_VIDEO: 'SHORT_VIDEO',
  LIVE_STREAM: 'LIVE_STREAM',
  PODCAST: 'PODCAST',
  IMAGE_POST: 'IMAGE_POST',
  TEXT_POST: 'TEXT_POST',
  STORY: 'STORY',
  THREAD: 'THREAD',
  FORUM_POST: 'FORUM_POST',
  FORUM_REPLY: 'FORUM_REPLY'
};

exports.ContentStatus = exports.$Enums.ContentStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  UNLISTED: 'UNLISTED',
  PRIVATE: 'PRIVATE',
  SCHEDULED: 'SCHEDULED',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MESSAGE: 'MESSAGE',
  REACTION: 'REACTION',
  COMMENT: 'COMMENT',
  LIKE: 'LIKE',
  FOLLOW: 'FOLLOW',
  MENTION: 'MENTION',
  VIDEO_UPLOAD: 'VIDEO_UPLOAD',
  LIVE_START: 'LIVE_START',
  COMMUNITY_POST: 'COMMUNITY_POST'
};

exports.ModerationAction = exports.$Enums.ModerationAction = {
  NONE: 'NONE',
  MOVE: 'MOVE',
  WARN: 'WARN',
  PIN: 'PIN',
  UNPIN: 'UNPIN',
  FEATURE: 'FEATURE',
  UNFEATURE: 'UNFEATURE',
  LOCK: 'LOCK',
  UNLOCK: 'UNLOCK',
  TIMEOUT: 'TIMEOUT',
  DELETE: 'DELETE',
  SUSPEND_USER: 'SUSPEND_USER',
  BAN_USER: 'BAN_USER',
  SHADOWBAN: 'SHADOWBAN'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  SPAM: 'SPAM',
  HARASSMENT: 'HARASSMENT',
  HATE_SPEECH: 'HATE_SPEECH',
  VIOLENCE: 'VIOLENCE',
  COPYRIGHT: 'COPYRIGHT',
  ADULT_CONTENT: 'ADULT_CONTENT',
  MISINFORMATION: 'MISINFORMATION',
  SCAM: 'SCAM',
  FAKE_ACCOUNT: 'FAKE_ACCOUNT',
  IMPERSONATION: 'IMPERSONATION',
  TERRORISM: 'TERRORISM',
  SELF_HARM: 'SELF_HARM',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  REVIEWING: 'REVIEWING',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED',
  ESCALATED: 'ESCALATED'
};

exports.Prisma.ModelName = {
  RoleGlobally: 'RoleGlobally',
  User: 'User',
  Device: 'Device',
  Session: 'Session',
  UserCrypto: 'UserCrypto',
  SignedPreKey: 'SignedPreKey',
  OneTimePreKey: 'OneTimePreKey',
  UsedOneTimePreKey: 'UsedOneTimePreKey',
  SecurityAuditLog: 'SecurityAuditLog',
  Chat: 'Chat',
  ChatParticipant: 'ChatParticipant',
  Message: 'Message',
  MessageThread: 'MessageThread',
  MessageEdit: 'MessageEdit',
  MessageAttachment: 'MessageAttachment',
  MessageReaction: 'MessageReaction',
  MessageRead: 'MessageRead',
  StickerPack: 'StickerPack',
  Sticker: 'Sticker',
  CustomEmoji: 'CustomEmoji',
  GifCategory: 'GifCategory',
  Gif: 'Gif',
  MessageSticker: 'MessageSticker',
  MessageEmoji: 'MessageEmoji',
  MessageGif: 'MessageGif',
  StickerPurchase: 'StickerPurchase',
  UserStickerPack: 'UserStickerPack',
  ChatFolder: 'ChatFolder',
  ChatFolderItem: 'ChatFolderItem',
  Content: 'Content',
  ContentAttachment: 'ContentAttachment',
  Comment: 'Comment',
  Like: 'Like',
  Tag: 'Tag',
  ContentTag: 'ContentTag',
  Subscription: 'Subscription',
  Playlist: 'Playlist',
  PlaylistItem: 'PlaylistItem',
  WatchHistory: 'WatchHistory',
  Notification: 'Notification',
  Forum: 'Forum',
  ForumModerator: 'ForumModerator',
  ForumCategoryModerator: 'ForumCategoryModerator',
  ForumConfiguration: 'ForumConfiguration',
  ForumTopicTracker: 'ForumTopicTracker',
  ForumCategory: 'ForumCategory',
  ForumCategoryPermission: 'ForumCategoryPermission',
  ForumPost: 'ForumPost',
  ForumReply: 'ForumReply',
  ForumVote: 'ForumVote',
  ForumSubscription: 'ForumSubscription',
  ForumTag: 'ForumTag',
  ForumPostTag: 'ForumPostTag',
  ForumAttachment: 'ForumAttachment',
  ForumModerationLog: 'ForumModerationLog',
  Report: 'Report',
  RefreshToken: 'RefreshToken',
  RefreshTokenBlacklist: 'RefreshTokenBlacklist',
  ContactList: 'ContactList',
  UserSettings: 'UserSettings',
  ChatSettings: 'ChatSettings',
  NotificationSettings: 'NotificationSettings',
  ForumPostSEO: 'ForumPostSEO',
  ForumReputation: 'ForumReputation',
  ForumHotTopics: 'ForumHotTopics',
  ForumAnalytics: 'ForumAnalytics',
  ForumNotificationQueue: 'ForumNotificationQueue',
  ChatStatsCache: 'ChatStatsCache',
  UserStatsCache: 'UserStatsCache',
  ContentStatsCache: 'ContentStatsCache',
  MessageArchive: 'MessageArchive',
  ContentArchive: 'ContentArchive',
  SearchCache: 'SearchCache',
  TrendingCache: 'TrendingCache'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
