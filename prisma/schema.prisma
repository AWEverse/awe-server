datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user status
enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

// Roles table
model Role {
  id          BigInt    @id @default(autoincrement())
  created_at  DateTime  @default(now())
  name        String    @unique
  updated_at  DateTime  @updatedAt
  users       User[]

  @@index([name])
}

// Users table
model User {
  id                      BigInt    @id @default(autoincrement())
  bio                     String?
  color                   String?
  created_at              DateTime  @default(now())
  email                   String    @unique
  email_verification_expires DateTime?
  email_verification_token String?
  first_name              String?
  is_verified             Boolean   @default(false)
  last_name               String?
  muted_until             DateTime?
  oauth_id                String?
  oauth_provider          String?
  password_hash           String?
  password_reset_expires  DateTime?
  password_reset_token    String?
  phone_number            String?
  profile_picture_url     String?
  role_id                 BigInt
  role                    Role      @relation(fields: [role_id], references: [id])
  status                  UserStatus @default(ACTIVE)
  two_factor_enabled      Boolean   @default(false)
  two_factor_secret       String?
  updated_at              DateTime  @updatedAt
  username                String    @unique
  auth_logs               AuthLog[]
  devices                 Device[]

  @@index([email])
  @@index([username])
  @@index([role_id])
  @@index([created_at])
}

// Devices table (for device checking)
model Device {
  id            String    @id @default(uuid())
  user_id       BigInt
  created_at    DateTime  @default(now())
  fingerprint   String    @unique
  ip_address    String
  is_trusted    Boolean   @default(false)
  last_seen     DateTime  @default(now())
  user_agent    String
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([fingerprint])
  @@index([last_seen])
}

// Token blacklist (for logout/revocation)
model TokenBlacklist {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  expires_at DateTime
  token      String    @unique

  @@index([expires_at])
  @@index([token])
}

// Auth logs (for rate limiting and lockout)
model AuthLog {
  id         String    @id @default(uuid())
  user_id    BigInt
  created_at DateTime  @default(now())
  ip_address String
  success    Boolean
  user_agent String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([ip_address, created_at])
}