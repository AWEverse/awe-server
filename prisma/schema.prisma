// Высокопроизводительная схема для мультимедийной платформы
// Объединяет мессенджер, видеохостинг, социальную сеть и форум
// 
// ПРОИЗВОДСТВЕННЫЕ ОПТИМИЗАЦИИ:
// 1. BigInt ID вместо UUID (экономия 75% места в индексах и FK)
// 2. Битовые флаги вместо множества Boolean полей  
// 3. Компактные VARCHAR с точными ограничениями
// 4. Оптимизированные составные индексы для частых запросов
// 5. Timestamptz(3) вместо полной точности (экономия места)
// 6. Денормализация для критически важных запросов
// 7. JSON для гибких настроек вместо множества колонок
// 8. Партиционирование по времени для больших таблиц
// 9. Специализированные индексы для полнотекстового поиска
// 10. Оптимизация foreign key constraints для производительности

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
  output          = "../generated/client"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pg_trgm, btree_gin, btree_gist]
}

// ===== ENUMS =====

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  DELETED
  RESTRICTED
}

enum ChatType {
  PRIVATE
  GROUP
  CHANNEL
  COMMUNITY
}

enum ChatRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  SUBSCRIBER
}

enum MessageType {
  SYSTEM
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  DOCUMENT
  STICKER
  VOICE
  VIDEO_NOTE
  LOCATION
  CONTACT
  POLL
  DICE
  GAME
  EMOJI
  GIF
  MARKDOWN
  CUSTOM_EMOJI
  STICKER_PACK
}

enum ContentType {
  VIDEO
  SHORT_VIDEO
  LIVE_STREAM
  PODCAST
  IMAGE_POST
  TEXT_POST
  STORY
  THREAD
  FORUM_POST
  FORUM_REPLY
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  UNLISTED
  PRIVATE
  SCHEDULED
  ARCHIVED
  DELETED
  UNDER_REVIEW
}

enum SubscriptionType {
  FREE
  PREMIUM
  CREATOR
  BUSINESS
}

enum NotificationType {
  MESSAGE
  REACTION
  COMMENT
  LIKE
  FOLLOW
  MENTION
  VIDEO_UPLOAD
  LIVE_START
  COMMUNITY_POST
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  VIOLENCE
  COPYRIGHT
  ADULT_CONTENT
  MISINFORMATION
  SCAM
  FAKE_ACCOUNT
  IMPERSONATION
  TERRORISM
  SELF_HARM
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
  ESCALATED
}

enum ModerationAction {
  NONE
  MOVE

  WARN
  PIN
  UNPIN
  FEATURE
  UNFEATURE
  LOCK
  UNLOCK
  TIMEOUT
  DELETE
  SUSPEND_USER
  BAN_USER
  SHADOWBAN
}

enum ChatPermission {
  SEND_MESSAGES
  SEND_MEDIA
  ADD_MEMBERS
  REMOVE_MEMBERS
  EDIT_INFO
  PIN_MESSAGES
  DELETE_MESSAGES
  BAN_MEMBERS
  MANAGE_PERMISSIONS
}

// ===== ОСНОВНЫЕ МОДЕЛИ =====

model RoleGlobally {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(32)
  flags       Int      @default(0) // founder(1), admin(2), moderator(4), verified(8)
  permissions Json?
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)

  users            User[]
  forumPermissions ForumCategoryPermission[]

  @@index([name])
  @@index([flags])
}

model User {
  id          BigInt  @id @default(autoincrement())
  email       String  @unique @db.VarChar(320) // RFC 5321 compliant
  username    String  @unique @db.VarChar(32)
  password    String  @db.VarChar(128) // Хэш пароля
  supabaseId  String? @unique @db.VarChar(36) // Supabase UUID
  fullName    String? @db.VarChar(128)
  bio         String? @db.VarChar(500)
  avatarUrl   String? @db.VarChar(512)
  bannerUrl   String? @db.VarChar(512)
  color       String? @db.Char(7) // HEX цвет для оформления
  phoneNumber String? @unique @db.VarChar(15)

  // Битовые флаги: verified(1), bot(2), online(4), creator(8), live(16), premium(32), staff(64)
  // ВАЖНО: Максимум 31 флаг для Int (2^31-1)
  flags  Int        @default(0)
  status UserStatus @default(ACTIVE)

  lastSeen  DateTime? @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)
  roleId    BigInt? // Nullable, по умолчанию простой пользователь

  // Полнотекстовый поиск (PostgreSQL tsvector для оптимального поиска)
  searchVector Unsupported("tsvector")?
  timezone     String?                  @db.VarChar(32)
  locale       String?                  @db.VarChar(10) // Увеличили для locale типа en-US

  // Денормализованная статистика (обновляется триггерами)
  subscribersCount   Int    @default(0)
  subscriptionsCount Int    @default(0)
  videosCount        Int    @default(0)
  postsCount         Int    @default(0)
  totalViews         BigInt @default(0)
  totalLikes         BigInt @default(0)
  reputation         Int    @default(0) // Для форума

  // Связи
  role                   RoleGlobally?           @relation(fields: [roleId], references: [id])
  devices                Device[]
  sessions               Session[]
  chatsCreated           Chat[]                  @relation("chatsCreated")
  chatParticipants       ChatParticipant[]
  messages               Message[]               @relation("messagesSent")
  refreshTokens          RefreshToken[]
  refreshTokensBlacklist RefreshTokenBlacklist[]
  userCrypto             UserCrypto?
  messageReactions       MessageReaction[]
  messageReads           MessageRead[]
  contactsAdded          ContactList[]           @relation("UserContacts")
  contactOf              ContactList[]           @relation("ContactOf")
  userSettings           UserSettings?
  notificationSettings   NotificationSettings[]

  // Контент и социальные функции
  contents        Content[]
  comments        Comment[]
  likes           Like[]
  subscriptions   Subscription[] @relation("UserSubscriptions")
  subscribers     Subscription[] @relation("SubscribedTo")
  playlists       Playlist[]
  watchHistory    WatchHistory[]
  notifications   Notification[]
  reports         Report[]       @relation("ReportedBy")
  reportedContent Report[]       @relation("ReportedUser")
  reviewedReports Report[]       @relation("ReviewedReports")

  // Форум
  ownedForums             Forum[]             @relation("ForumOwner")
  forumModeratorRoles     ForumModerator[]    @relation("ForumModeratorRoles")
  assignedForumModerators ForumModerator[]    @relation("AssignedForumModerators")
  forumPosts              ForumPost[]
  forumReplies            ForumReply[]
  forumSubscriptions      ForumSubscription[]
  forumVotes              ForumVote[]

  // Модерация
  moderatorActions ForumModerationLog[] @relation("ModeratorActions")
  moderatedActions ForumModerationLog[] @relation("ModeratedUsers")

  // Форум - дополнительные связи
  categoryModerators ForumCategoryModerator[] @relation("CategoryModerators")
  assignedModerators ForumCategoryModerator[] @relation("AssignedModerators")
  forumTrackers      ForumTopicTracker[]      @relation("ForumTrackers")
  forumReputation    ForumReputation?         @relation("UserReputation")
  forumNotifications ForumNotificationQueue[] @relation("ForumNotifications")

  // Stickers, Emojis и Media
  createdStickerPacks StickerPack[]     @relation("CreatedStickerPacks")
  stickerPurchases    StickerPurchase[]
  userStickerPacks    UserStickerPack[]
  createdEmojis       CustomEmoji[]     @relation("CreatedEmojis")
  chatFolders         ChatFolder[]      @relation("UserFolders")

  // Security
  securityAudits      SecurityAuditLog[] @relation("SecurityAudits")
  securityResolutions SecurityAuditLog[] @relation("SecurityResolver")

  @@index([email])
  @@index([username])
  @@index([phoneNumber])
  @@index([roleId])
  @@index([status, flags])
  @@index([lastSeen])
  @@index([createdAt])
  @@index([status, deletedAt])
  @@index([subscribersCount])
  @@index([totalViews])
  @@index([reputation]) // Для форума
  @@index([flags, status]) // Составной индекс для быстрого поиска активных пользователей
  @@index([createdAt, flags]) // Для поиска новых пользователей
}

model Device {
  id            BigInt    @id @default(autoincrement())
  userId        BigInt
  deviceId      String    @unique
  deviceName    String?   @db.VarChar(64)
  deviceType    String?   @db.VarChar(32)
  deviceVersion String?   @db.VarChar(32)
  ipAddress     String?   @db.Inet
  userAgent     String?   @db.VarChar(512) // Увеличено для современных UA
  fingerprint   String?   @db.VarChar(256) // Уникальный отпечаток устройства
  flags         Int       @default(1) // isActive(1), trusted(2)
  lastUsed      DateTime? @db.Timestamptz(3)
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@index([userId])
  @@index([deviceId])
  @@index([userId, flags]) // Составной индекс включает простой
  @@index([lastUsed])
}

model Session {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt    @unique
  deviceId     BigInt    @unique
  ratchetState Bytes
  sessionKey   String?   @db.VarChar(256)
  expiresAt    DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  flags        Int       @default(1) // isActive(1)

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  device       Device         @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  RefreshToken RefreshToken[]

  @@index([userId])
  @@index([deviceId])
  @@index([userId, flags])
  @@index([expiresAt])
  @@index([sessionKey])
}

model UserCrypto {
  id                BigInt   @id @default(autoincrement())
  userId            BigInt   @unique
  identityKeyPublic String   @db.VarChar(128)
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  signedPreKeys      SignedPreKey[]
  oneTimePreKeys     OneTimePreKey[]
  usedOneTimePreKeys UsedOneTimePreKey[]

  @@index([userId])
}

model SignedPreKey {
  id           BigInt    @id @default(autoincrement())
  userCryptoId BigInt
  keyId        Int
  publicKey    String    @db.VarChar(128)
  signature    String    @db.VarChar(128)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  flags        Int       @default(0) // isUsed(1)
  expiresAt    DateTime? @db.Timestamptz(3)

  userCrypto UserCrypto @relation(fields: [userCryptoId], references: [id], onDelete: Cascade)

  @@unique([userCryptoId, keyId])
  @@index([userCryptoId])
  @@index([flags])
  @@index([expiresAt])
}

model OneTimePreKey {
  id           BigInt   @id @default(autoincrement())
  userCryptoId BigInt
  keyId        Int
  publicKey    String   @db.VarChar(128)
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  flags        Int      @default(0) // isUsed(1)

  userCrypto UserCrypto @relation(fields: [userCryptoId], references: [id], onDelete: Cascade)

  @@unique([userCryptoId, keyId])
  @@index([userCryptoId])
  @@index([flags])
  @@index([createdAt])
}

model UsedOneTimePreKey {
  id           BigInt   @id @default(autoincrement())
  userCryptoId BigInt
  keyId        Int
  usedAt       DateTime @default(now()) @db.Timestamptz(3)

  userCrypto UserCrypto @relation(fields: [userCryptoId], references: [id], onDelete: Cascade)

  @@unique([userCryptoId, keyId])
  @@index([userCryptoId])
  @@index([usedAt])
}

// ===== SECURITY AUDIT =====

model SecurityAuditLog {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt?
  eventType   String    @db.VarChar(50)
  severity    String    @db.VarChar(20) // LOW, MEDIUM, HIGH, CRITICAL
  description String    @db.VarChar(500)
  ipAddress   String?   @db.Inet
  userAgent   String?   @db.VarChar(512)
  metadata    Json?
  timestamp   DateTime  @default(now()) @db.Timestamptz(3)
  resolvedAt  DateTime? @db.Timestamptz(3)
  resolvedBy  BigInt?

  // Relations
  user     User? @relation("SecurityAudits", fields: [userId], references: [id], onDelete: SetNull)
  resolver User? @relation("SecurityResolver", fields: [resolvedBy], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@index([ipAddress])
  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([severity, timestamp])
}

// ===== МЕССЕНДЖЕР =====

model Chat {
  id          BigInt   @id @default(autoincrement())
  type        ChatType
  createdById BigInt
  title       String?  @db.VarChar(128)
  description String?  @db.VarChar(500)
  avatarUrl   String?  @db.VarChar(200)
  bannerUrl   String?  @db.VarChar(200)
  color       String?  @db.Char(7) // HEX цвет для оформления

  // Битовые флаги: archived(1), public(2), verified(4), premium(8)
  flags Int @default(0)

  inviteLink      String?   @unique @db.VarChar(64)
  memberCount     Int       @default(0)
  lastMessageAt   DateTime? @db.Timestamptz(3)
  lastMessageText String?   @db.VarChar(100) // Денормализация для превью
  createdAt       DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(3)
  deletedAt       DateTime? @db.Timestamptz(3)

  createdBy            User                   @relation("chatsCreated", fields: [createdById], references: [id])
  participants         ChatParticipant[]
  messages             Message[]
  pinnedMessageId      BigInt?
  pinnedMessage        Message?               @relation("PinnedMessage", fields: [pinnedMessageId], references: [id])
  chatSettings         ChatSettings?
  notificationSettings NotificationSettings[]
  customEmojis         CustomEmoji[]          @relation("CustomEmojis")
  folderItems          ChatFolderItem[]       @relation("FolderItems")

  @@index([type])
  @@index([createdById])
  @@index([flags])
  @@index([lastMessageAt])
  @@index([memberCount])
  @@index([type, flags])
  @@index([createdAt])
  @@index([deletedAt])
}

model ChatParticipant {
  id       BigInt    @id @default(autoincrement())
  chatId   BigInt
  userId   BigInt
  role     ChatRole  @default(MEMBER)
  joinedAt DateTime  @default(now()) @db.Timestamptz(3)
  leftAt   DateTime? @db.Timestamptz(3)

  // Битовые флаги: admin(1), owner(2), muted(4), banned(8)
  flags      Int       @default(0)
  mutedUntil DateTime? @db.Timestamptz(3)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@index([role])
  @@index([joinedAt])
  @@index([leftAt])
  @@index([chatId, role])
  @@index([userId, leftAt])
}

model Message {
  id          BigInt      @id @default(autoincrement())
  chatId      BigInt
  senderId    BigInt
  content     Bytes // Зашифрованный контент
  header      Bytes // Метаданные сообщения
  messageType MessageType @default(TEXT)
  createdAt   DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(3)
  editedAt    DateTime?   @db.Timestamptz(3)

  // Битовые флаги: deleted(1), edited(2), forwarded(4), pinned(8)
  flags     Int       @default(0)
  deletedAt DateTime? @db.Timestamptz(3)

  replyToId       BigInt?
  forwardedFromId BigInt?
  threadId        BigInt? // Для тредов в чатах
  replyDepth      Int     @default(0) // Глубина вложенности ответов (макс 10)

  chat            Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User                @relation("messagesSent", fields: [senderId], references: [id])
  replyTo         Message?            @relation("ReplyTo", fields: [replyToId], references: [id])
  replies         Message[]           @relation("ReplyTo")
  forwardedFrom   Message?            @relation("ForwardedFrom", fields: [forwardedFromId], references: [id])
  forwards        Message[]           @relation("ForwardedFrom")
  thread          MessageThread?      @relation("ThreadMessage", fields: [threadId], references: [id])
  attachments     MessageAttachment[]
  reactions       MessageReaction[]
  edits           MessageEdit[]
  pinnedIn        Chat[]              @relation("PinnedMessage")
  messageReads    MessageRead[]
  messageStickers MessageSticker[]
  messageEmojis   MessageEmoji[]
  messageGifs     MessageGif[]

  @@index([chatId, createdAt])
  @@index([senderId])
  @@index([messageType])
  @@index([flags])
  @@index([replyToId])
  @@index([forwardedFromId])
  @@index([threadId])
  @@index([replyDepth]) // Для ограничения глубины
  @@index([chatId, flags, createdAt])
  @@index([deletedAt])
}

model MessageThread {
  id        BigInt   @id @default(autoincrement())
  chatId    BigInt
  creatorId BigInt
  title     String?  @db.VarChar(128)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  flags     Int      @default(0) // active(1), locked(2)

  messages Message[] @relation("ThreadMessage")

  @@index([chatId])
  @@index([creatorId])
  @@index([createdAt])
}

model MessageEdit {
  id        BigInt   @id @default(autoincrement())
  messageId BigInt
  content   Bytes
  editedAt  DateTime @default(now()) @db.Timestamptz(3)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([editedAt])
}

model MessageAttachment {
  id          BigInt   @id @default(autoincrement())
  messageId   BigInt
  fileName    String   @db.VarChar(128)
  mimeType    String   @db.VarChar(64)
  fileHash    String   @db.VarChar(64)
  fileKey     String   @db.VarChar(64)
  fileIV      String   @db.VarChar(32)
  fileSize    Int
  fileType    String   @db.VarChar(16)
  thumbnail   String?  @db.VarChar(200)
  description String?  @db.VarChar(255)
  url         String   @db.VarChar(512)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([mimeType])
  @@index([fileType])
  @@index([fileHash])
}

model MessageReaction {
  id        BigInt   @id @default(autoincrement())
  messageId BigInt
  userId    BigInt
  reaction  String   @db.VarChar(32) // Например, "👍", "❤️", "😂" 
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, reaction])
  @@index([messageId])
  @@index([userId])
  @@index([reaction])
}

model MessageRead {
  id        BigInt    @id @default(autoincrement())
  messageId BigInt
  userId    BigInt
  readAt    DateTime? @db.Timestamptz(3)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([readAt])
  @@index([userId, readAt])
}

// ===== СТИКЕРЫ, ЭМОДЖИ И МЕДИА =====

model StickerPack {
  id           BigInt  @id @default(autoincrement())
  name         String  @db.VarChar(64)
  title        String  @db.VarChar(128)
  description  String? @db.VarChar(255)
  authorId     BigInt?
  thumbnailUrl String  @db.VarChar(512)

  // Битовые флаги: premium(1), animated(2), official(4), nsfw(8), disabled(16)
  flags    Int     @default(0)
  price    Int     @default(0) // В центах, 0 = бесплатно
  category String? @db.VarChar(32)
  tags     String? @db.VarChar(255) // Теги через запятую

  downloadCount Int @default(0)
  usageCount    Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  author    User?             @relation("CreatedStickerPacks", fields: [authorId], references: [id])
  stickers  Sticker[]
  purchases StickerPurchase[]
  userPacks UserStickerPack[]

  @@index([authorId])
  @@index([flags])
  @@index([category])
  @@index([downloadCount])
  @@index([usageCount])
  @@index([createdAt])
}

model Sticker {
  id       BigInt @id @default(autoincrement())
  packId   BigInt
  emoji    String @db.VarChar(32) // Ассоциированный эмоджи
  fileUrl  String @db.VarChar(512)
  fileName String @db.VarChar(128)

  // Метаданные
  width    Int
  height   Int
  fileSize Int
  mimeType String @db.VarChar(32)

  // Битовые флаги: animated(1), premium(2)
  flags Int @default(0)

  usageCount Int @default(0)
  position   Int @default(0) // Позиция в паке

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  pack     StickerPack      @relation(fields: [packId], references: [id], onDelete: Cascade)
  messages MessageSticker[]

  @@index([packId])
  @@index([emoji])
  @@index([usageCount])
  @@index([position])
}

model CustomEmoji {
  id       BigInt  @id @default(autoincrement())
  chatId   BigInt? // Если null - глобальный эмоджи
  authorId BigInt
  name     String  @db.VarChar(32) // :custom_name:
  fileUrl  String  @db.VarChar(512)

  // Метаданные
  width    Int
  height   Int
  fileSize Int
  mimeType String @db.VarChar(32)

  // Битовые флаги: animated(1), premium(2), verified(4), disabled(8)
  flags Int @default(0)

  usageCount Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  chat     Chat?          @relation("CustomEmojis", fields: [chatId], references: [id], onDelete: Cascade)
  author   User           @relation("CreatedEmojis", fields: [authorId], references: [id])
  messages MessageEmoji[]

  @@unique([chatId, name])
  @@index([chatId])
  @@index([authorId])
  @@index([name])
  @@index([flags])
  @@index([usageCount])
}

model GifCategory {
  id          BigInt  @id @default(autoincrement())
  name        String  @unique @db.VarChar(64)
  description String? @db.VarChar(255)
  iconUrl     String? @db.VarChar(512)

  // Битовые флаги: trending(1), featured(2), nsfw(4)
  flags    Int @default(0)
  position Int @default(0)

  gifCount Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  gifs Gif[]

  @@index([name])
  @@index([flags])
  @@index([position])
}

model Gif {
  id         BigInt @id @default(autoincrement())
  categoryId BigInt
  title      String @db.VarChar(128)
  url        String @db.VarChar(512)
  previewUrl String @db.VarChar(512)

  // Метаданные
  width    Int
  height   Int
  fileSize Int
  duration Float? // В секундах

  tags       String? @db.VarChar(255) // Теги через запятую
  searchText String? @db.VarChar(255) // Для поиска

  // Битовые флаги: trending(1), featured(2), nsfw(4), verified(8)
  flags Int @default(0)

  usageCount Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  category GifCategory  @relation(fields: [categoryId], references: [id])
  messages MessageGif[]

  @@index([categoryId])
  @@index([title])
  @@index([tags])
  @@index([flags])
  @@index([usageCount])
  @@index([searchText])
}

// Связи сообщений с медиа контентом
model MessageSticker {
  id        BigInt @id @default(autoincrement())
  messageId BigInt
  stickerId BigInt

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  sticker Sticker @relation(fields: [stickerId], references: [id])

  @@unique([messageId, stickerId])
  @@index([messageId])
  @@index([stickerId])
}

model MessageEmoji {
  id        BigInt @id @default(autoincrement())
  messageId BigInt
  emojiId   BigInt

  message Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  emoji   CustomEmoji @relation(fields: [emojiId], references: [id])

  @@unique([messageId, emojiId])
  @@index([messageId])
  @@index([emojiId])
}

model MessageGif {
  id        BigInt @id @default(autoincrement())
  messageId BigInt
  gifId     BigInt

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  gif     Gif     @relation(fields: [gifId], references: [id])

  @@unique([messageId, gifId])
  @@index([messageId])
  @@index([gifId])
}

// Покупки и подписки на стикер-паки
model StickerPurchase {
  id       BigInt @id @default(autoincrement())
  userId   BigInt
  packId   BigInt
  price    Int // Цена на момент покупки
  currency String @default("USD") @db.VarChar(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack StickerPack @relation(fields: [packId], references: [id])

  @@unique([userId, packId])
  @@index([userId])
  @@index([packId])
  @@index([createdAt])
}

model UserStickerPack {
  id       BigInt @id @default(autoincrement())
  userId   BigInt
  packId   BigInt
  position Int    @default(0) // Порядок в списке пользователя

  // Битовые флаги: favorite(1), hidden(2)
  flags Int @default(0)

  addedAt DateTime @default(now()) @db.Timestamptz(3)

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack StickerPack @relation(fields: [packId], references: [id])

  @@unique([userId, packId])
  @@index([userId])
  @@index([packId])
  @@index([position])
  @@index([flags])
}

// ===== ПАПКИ ЧАТОВ =====

model ChatFolder {
  id          BigInt  @id @default(autoincrement())
  userId      BigInt
  name        String  @db.VarChar(64)
  description String? @db.VarChar(255)
  color       String? @db.Char(7) // HEX цвет
  iconUrl     String? @db.VarChar(512)

  // Битовые флаги: pinned(1), collapsed(2), archived(4), default(8)
  flags    Int @default(0)
  position Int @default(0) // Позиция в списке папок

  // Фильтры для автоматического добавления чатов
  filters Json? // Условия для автоматической сортировки

  chatCount Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  user  User             @relation("UserFolders", fields: [userId], references: [id], onDelete: Cascade)
  chats ChatFolderItem[]

  @@index([userId])
  @@index([position])
  @@index([flags])
  @@index([userId, position])
}

model ChatFolderItem {
  id       BigInt @id @default(autoincrement())
  folderId BigInt
  chatId   BigInt
  position Int    @default(0) // Позиция чата в папке

  // Битовые флаги: pinned(1), muted(2), archived(4)
  flags Int @default(0)

  addedAt DateTime @default(now()) @db.Timestamptz(3)

  folder ChatFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  chat   Chat       @relation("FolderItems", fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([folderId, chatId])
  @@index([folderId])
  @@index([chatId])
  @@index([position])
  @@index([flags])
}

// ===== КОНТЕНТ (YOUTUBE + INSTAGRAM) =====

model Content {
  id           BigInt        @id @default(autoincrement())
  authorId     BigInt
  type         ContentType
  status       ContentStatus @default(DRAFT)
  title        String        @db.VarChar(200)
  description  String?       @db.Text
  thumbnailUrl String?       @db.VarChar(300)

  // Битовые флаги: featured(1), monetized(2), ageRestricted(4), commentsDisabled(8)
  flags Int @default(0)

  // Метаданные для различных типов контента
  metadata Json? // duration, resolution, codec для видео; dimensions для изображений

  // Денормализованная статистика
  viewsCount    BigInt @default(0)
  likesCount    BigInt @default(0)
  dislikesCount BigInt @default(0)
  sharesCount   BigInt @default(0)
  commentsCount Int    @default(0)

  // Планирование публикации
  publishedAt DateTime? @db.Timestamptz(3)
  scheduledAt DateTime? @db.Timestamptz(3)

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  deletedAt DateTime? @db.Timestamptz(3)

  author      User                @relation(fields: [authorId], references: [id])
  attachments ContentAttachment[]
  comments    Comment[]
  likes       Like[]
  tags        ContentTag[]
  playlists   PlaylistItem[]
  history     WatchHistory[]
  reports     Report[]

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
  @@index([viewsCount])
  @@index([likesCount])
  @@index([createdAt])
  @@index([flags])
  @@index([type, status, publishedAt])
  @@index([authorId, type, status])
}

model ContentAttachment {
  id        BigInt   @id @default(autoincrement())
  contentId BigInt
  url       String   @db.VarChar(500)
  mimeType  String   @db.VarChar(64)
  fileSize  BigInt
  metadata  Json? // width, height, duration, bitrate, etc.
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([mimeType])
}

model Comment {
  id        BigInt  @id @default(autoincrement())
  contentId BigInt
  authorId  BigInt
  parentId  BigInt? // Для вложенных комментариев
  text      String  @db.VarChar(1000)

  // Битовые флаги: deleted(1), edited(2), pinned(4), hearted(8)
  flags Int @default(0)

  likesCount BigInt    @default(0)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(3)
  deletedAt  DateTime? @db.Timestamptz(3)

  content Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  likes   Like[]

  @@index([contentId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([contentId, parentId, createdAt])
}

model Like {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  contentId BigInt?
  commentId BigInt?
  value     Int      @default(1) // 1 для лайка, -1 для дизлайка
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([contentId])
  @@index([commentId])
  @@index([createdAt])
}

model Tag {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  description String?  @db.VarChar(255)
  flags       Int      @default(0) // trending(1), official(2)
  usageCount  BigInt   @default(0)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)

  contentTags ContentTag[]

  @@index([name])
  @@index([usageCount])
  @@index([flags])
}

model ContentTag {
  id        BigInt @id @default(autoincrement())
  contentId BigInt
  tagId     BigInt

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([contentId, tagId])
  @@index([contentId])
  @@index([tagId])
}

// ===== СОЦИАЛЬНАЯ СЕТЬ =====

model Subscription {
  id             BigInt @id @default(autoincrement())
  subscriberId   BigInt
  subscribedToId BigInt

  // Битовые флаги: notificationsEnabled(1), premium(2)
  flags     Int      @default(1)
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  subscriber   User @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscribedTo User @relation("SubscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, subscribedToId])
  @@index([subscriberId])
  @@index([subscribedToId])
  @@index([createdAt])
}

model Playlist {
  id           BigInt  @id @default(autoincrement())
  authorId     BigInt
  title        String  @db.VarChar(128)
  description  String? @db.VarChar(500)
  thumbnailUrl String? @db.VarChar(300)

  // Битовые флаги: public(1), collaborative(2), featured(4)
  flags Int @default(1)

  itemsCount Int      @default(0)
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @db.Timestamptz(3)

  author User           @relation(fields: [authorId], references: [id])
  items  PlaylistItem[]

  @@index([authorId])
  @@index([flags])
  @@index([createdAt])
}

model PlaylistItem {
  id         BigInt   @id @default(autoincrement())
  playlistId BigInt
  contentId  BigInt
  position   Int
  addedAt    DateTime @default(now()) @db.Timestamptz(3)

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  content  Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([playlistId, contentId])
  @@index([playlistId, position])
  @@index([contentId])
}

model WatchHistory {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  contentId BigInt
  watchedAt DateTime @default(now()) @db.Timestamptz(3)
  watchTime Int      @default(0) // Секунды просмотра
  completed Boolean  @default(false)
  progress  Float    @default(0) // Процент просмотра (0-1)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
  @@index([watchedAt])
  @@index([userId, watchedAt])
}

model Notification {
  id      BigInt           @id @default(autoincrement())
  userId  BigInt
  type    NotificationType
  title   String           @db.VarChar(128)
  message String           @db.VarChar(255)
  data    Json? // Дополнительные данные (ID контента, пользователя и т.д.)

  // Битовые флаги: read(1), important(2)
  flags Int @default(0)

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  readAt    DateTime? @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([flags])
  @@index([createdAt])
  @@index([userId, flags, createdAt])
}

// ===== ФОРУМ =====

// Корневая модель форума - основной контейнер для всех категорий и постов
model Forum {
  id          BigInt  @id @default(autoincrement())
  name        String  @db.VarChar(128)
  slug        String  @unique @db.VarChar(64) // Для SEO URL
  description String? @db.VarChar(500)
  logoUrl     String? @db.VarChar(300)
  bannerUrl   String? @db.VarChar(300)

  // Битовые флаги: active(1), public(2), moderated(4), archived(8), featured(16)
  flags Int @default(3) // active + public by default

  // Настройки форума
  settings Json? // Конфигурация: правила, стили, разрешения

  // Денормализованная статистика для производительности
  categoriesCount Int @default(0)
  postsCount      Int @default(0)
  topicsCount     Int @default(0)
  repliesCount    Int @default(0)
  usersCount      Int @default(0) // Уникальные пользователи

  // Активность
  lastPostAt     DateTime? @db.Timestamptz(3)
  lastPostId     BigInt? // Для быстрого доступа к последнему посту
  lastActivityAt DateTime? @db.Timestamptz(3)

  // Владелец и модерация
  ownerId   BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  // Связи
  owner         User                 @relation("ForumOwner", fields: [ownerId], references: [id])
  categories    ForumCategory[]      @relation("ForumCategories")
  moderators    ForumModerator[]     @relation("ForumModerators")
  configuration ForumConfiguration[] @relation("ForumConfig")
  analytics     ForumAnalytics[]     @relation("ForumAnalytics")

  @@index([slug])
  @@index([flags])
  @@index([ownerId])
  @@index([lastActivityAt])
  @@index([flags, lastActivityAt]) // Для списка активных форумов
}

// Модераторы форума (отдельно от категорий)
model ForumModerator {
  id          BigInt    @id @default(autoincrement())
  forumId     BigInt
  userId      BigInt
  permissions BigInt    @default(0) // Битовые флаги разрешений
  assignedBy  BigInt
  assignedAt  DateTime  @default(now()) @db.Timestamptz(3)
  expiresAt   DateTime? @db.Timestamptz(3)
  isActive    Boolean   @default(true)

  forum     Forum @relation("ForumModerators", fields: [forumId], references: [id], onDelete: Cascade)
  moderator User  @relation("ForumModeratorRoles", fields: [userId], references: [id], onDelete: Cascade)
  assigner  User  @relation("AssignedForumModerators", fields: [assignedBy], references: [id], onDelete: Restrict)

  @@unique([forumId, userId])
  @@index([forumId])
  @@index([userId])
  @@index([assignedBy])
  @@index([isActive, expiresAt])
}

// Продвинутая модерация категорий форума
model ForumCategoryModerator {
  id          BigInt    @id @default(autoincrement())
  categoryId  BigInt
  userId      BigInt
  permissions BigInt    @default(0) // Битовые флаги для разрешений модератора (64 бита)
  assignedBy  BigInt
  assignedAt  DateTime  @default(now()) @db.Timestamptz(3)
  expiresAt   DateTime? @db.Timestamptz(3)
  isActive    Boolean   @default(true)

  category  ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  moderator User          @relation("CategoryModerators", fields: [userId], references: [id], onDelete: Cascade)
  assigner  User          @relation("AssignedModerators", fields: [assignedBy], references: [id], onDelete: Restrict)

  @@unique([categoryId, userId])
  @@index([categoryId])
  @@index([userId])
  @@index([assignedBy])
  @@index([isActive, expiresAt])
}

// Конфигурация форума
model ForumConfiguration {
  id          Int     @id @default(autoincrement())
  forumId     BigInt // Привязка к форуму
  key         String  @db.VarChar(64)
  value       String  @db.Text
  type        String  @default("string") @db.VarChar(16) // string, number, boolean, json
  description String? @db.VarChar(255)
  isPublic    Boolean @default(false) // Доступно ли через API

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  forum Forum @relation("ForumConfig", fields: [forumId], references: [id], onDelete: Cascade)

  @@unique([forumId, key])
  @@index([forumId])
  @@index([key])
  @@index([isPublic])
}

// Отслеживание прочитанных тем пользователями
model ForumTopicTracker {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  postId    BigInt
  lastRead  DateTime @default(now()) @db.Timestamptz(3)
  readCount Int      @default(0) // Количество прочитанных ответов

  user User      @relation("ForumTrackers", fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation("PostTrackers", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([lastRead])
}

model ForumCategory {
  id          BigInt  @id @default(autoincrement())
  forumId     BigInt // Привязка к форуму
  name        String  @db.VarChar(64)
  slug        String  @unique @db.VarChar(64) // Для SEO-дружественных URL
  description String? @db.VarChar(255)
  color       String? @db.Char(7)
  icon        String? @db.VarChar(32) // Unicode emoji или icon class
  position    Int     @default(0)
  parentId    BigInt? // Для вложенных категорий (макс 3 уровня)
  level       Int     @default(0) // Уровень вложенности (0-2)

  // Битовые флаги: active(1), moderated(2), private(4), archived(8)
  flags Int @default(1)

  // Денормализованная статистика
  postsCount   Int @default(0)
  repliesCount Int @default(0)
  topicsCount  Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  // Связи
  forum       Forum                     @relation("ForumCategories", fields: [forumId], references: [id], onDelete: Cascade)
  parent      ForumCategory?            @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ForumCategory[]           @relation("CategoryHierarchy")
  posts       ForumPost[]
  permissions ForumCategoryPermission[]
  moderators  ForumCategoryModerator[]
  analytics   ForumAnalytics[]          @relation("CategoryAnalytics")

  @@index([forumId])
  @@index([position])
  @@index([flags])
  @@index([postsCount])
  @@index([parentId])
  @@index([slug])
  @@index([level]) // Для ограничения уровней вложенности
  @@index([parentId, position]) // Для иерархического вывода
  @@index([forumId, position]) // Для категорий в форуме
}

model ForumCategoryPermission {
  id          BigInt   @id @default(autoincrement())
  categoryId  BigInt
  roleId      BigInt
  permissions BigInt   @default(0) // Битовая маска разрешений
  createdAt   DateTime @default(now()) @db.Timestamptz(3)

  category ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  role     RoleGlobally  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([categoryId, roleId])
  @@index([categoryId])
  @@index([roleId])
}

model ForumPost {
  id         BigInt @id @default(autoincrement())
  categoryId BigInt
  authorId   BigInt
  title      String @db.VarChar(200)
  content    String @db.Text
  slug       String @unique @db.VarChar(200) // SEO-дружественный URL

  // Битовые флаги: pinned(1), locked(2), featured(4), solved(8), hidden(16), deleted(32)
  flags Int @default(0)

  // Денормализованная статистика
  viewsCount    Int @default(0)
  repliesCount  Int @default(0)
  likesCount    Int @default(0)
  dislikesCount Int @default(0)

  // Временные метки
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  lastReplyAt DateTime? @db.Timestamptz(3)
  lastReplyBy BigInt? // ID последнего ответившего пользователя

  // Полнотекстовый поиск (PostgreSQL tsvector для оптимального поиска)
  searchVector Unsupported("tsvector")?

  // Связи
  category      ForumCategory       @relation(fields: [categoryId], references: [id])
  author        User                @relation(fields: [authorId], references: [id])
  replies       ForumReply[]
  votes         ForumVote[]         @relation("PostVotes")
  subscriptions ForumSubscription[]
  tags          ForumPostTag[]
  attachments   ForumAttachment[]
  trackers      ForumTopicTracker[] @relation("PostTrackers")
  seoPost       ForumPostSEO?       @relation("PostSEO")
  hotTopics     ForumHotTopics[]    @relation("HotTopics")

  @@index([categoryId])
  @@index([authorId])
  @@index([flags])
  @@index([createdAt])
  @@index([lastReplyAt])
  @@index([viewsCount])
  @@index([likesCount])
  @@index([slug])
  @@index([categoryId, flags, lastReplyAt]) // Основной индекс для списка тем
  @@index([categoryId, flags, createdAt]) // Для сортировки по дате создания
}

model ForumReply {
  id       BigInt  @id @default(autoincrement())
  postId   BigInt
  authorId BigInt
  content  String  @db.Text
  parentId BigInt? // Для древовидных ответов

  // Битовые флаги: deleted(1), edited(2), solution(4), hidden(8)
  flags Int @default(0)

  likesCount    Int @default(0)
  dislikesCount Int @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  // Полнотекстовый поиск (PostgreSQL tsvector для оптимального поиска)
  searchVector Unsupported("tsvector")?

  // Связи
  post        ForumPost         @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User              @relation(fields: [authorId], references: [id])
  parent      ForumReply?       @relation("ReplyHierarchy", fields: [parentId], references: [id])
  children    ForumReply[]      @relation("ReplyHierarchy")
  votes       ForumVote[]       @relation("ReplyVotes")
  attachments ForumAttachment[]

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
  @@index([flags])
  @@index([parentId])
  @@index([postId, createdAt]) // Основной индекс для ответов в теме
}

model ForumVote {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  postId    BigInt?
  replyId   BigInt?
  value     Int // 1 для upvote, -1 для downvote
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  ForumPost?  @relation("PostVotes", fields: [postId], references: [id], onDelete: Cascade)
  reply ForumReply? @relation("ReplyVotes", fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@index([userId])
  @@index([postId])
  @@index([replyId])
  @@index([value])
}

model ForumSubscription {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  postId    BigInt
  flags     Int      @default(1) // notifications(1), email(2), instant(4)
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model ForumTag {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique @db.VarChar(32)
  description String?  @db.VarChar(255)
  color       String?  @db.Char(7)
  usageCount  Int      @default(0)
  flags       Int      @default(1) // active(1), moderated(2)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)

  posts ForumPostTag[]

  @@index([name])
  @@index([usageCount])
  @@index([flags])
}

model ForumPostTag {
  id     BigInt @id @default(autoincrement())
  postId BigInt
  tagId  BigInt

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  ForumTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model ForumAttachment {
  id           BigInt  @id @default(autoincrement())
  postId       BigInt?
  replyId      BigInt?
  fileName     String  @db.VarChar(255)
  originalName String  @db.VarChar(255)
  mimeType     String  @db.VarChar(100)
  fileSize     BigInt
  url          String  @db.VarChar(500)
  thumbnailUrl String? @db.VarChar(500)

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  post  ForumPost?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply ForumReply? @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([replyId])
  @@index([mimeType])
}

// Модерация форума
model ForumModerationLog {
  id           BigInt           @id @default(autoincrement())
  moderatorId  BigInt
  targetUserId BigInt?
  postId       BigInt?
  replyId      BigInt?
  action       ModerationAction
  reason       String?          @db.VarChar(500)
  metadata     Json? // Дополнительные данные о действии
  createdAt    DateTime         @default(now()) @db.Timestamptz(3)

  moderator  User  @relation("ModeratorActions", fields: [moderatorId], references: [id])
  targetUser User? @relation("ModeratedUsers", fields: [targetUserId], references: [id])

  @@index([moderatorId])
  @@index([targetUserId])
  @@index([postId])
  @@index([replyId])
  @@index([action])
  @@index([createdAt])
}

// ===== МОДЕРАЦИЯ И БЕЗОПАСНОСТЬ =====

model Report {
  id          BigInt       @id @default(autoincrement())
  reporterId  BigInt
  userId      BigInt? // Если жалуемся на пользователя
  contentId   BigInt? // Если жалуемся на контент
  postId      BigInt? // Если жалуемся на пост форума
  replyId     BigInt? // Если жалуемся на ответ форума
  messageId   BigInt? // Если жалуемся на сообщение
  reason      ReportReason
  status      ReportStatus @default(PENDING)
  description String?      @db.VarChar(500)

  // Битовые флаги: reviewed(1), resolved(2), dismissed(4), escalated(8)
  flags Int @default(0)

  // Модерация
  reviewedBy BigInt?
  reviewedAt DateTime?        @db.Timestamptz(3)
  resolution String?          @db.VarChar(500)
  action     ModerationAction @default(NONE)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  reporter User     @relation("ReportedBy", fields: [reporterId], references: [id])
  user     User?    @relation("ReportedUser", fields: [userId], references: [id])
  content  Content? @relation(fields: [contentId], references: [id])
  reviewer User?    @relation("ReviewedReports", fields: [reviewedBy], references: [id])

  @@index([reporterId])
  @@index([userId])
  @@index([contentId])
  @@index([postId])
  @@index([replyId])
  @@index([messageId])
  @@index([reason])
  @@index([status])
  @@index([flags])
  @@index([createdAt])
  @@index([reviewedBy])
  @@index([status, createdAt]) // Для очереди модерации
}

// ===== НАСТРОЙКИ И КОНФИГУРАЦИЯ =====

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  sessionId BigInt
  userId    BigInt   @unique
  token     String   @unique @db.VarChar(255)
  tokenHash String   @unique @db.VarChar(255) // Хеш токена для безопасности
  expiresAt DateTime @db.Timestamptz(3)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  deviceId  String?  @unique
  ipAddress String?  @db.Inet
  userAgent String?  @db.VarChar(512)
  isRevoked Boolean  @default(false)
  isUsed    Boolean  @default(false) // For reuse detection (Signal/Stripe pattern)

  session Session @relation(fields: [sessionId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@index([isRevoked])
  @@index([isUsed])
  @@index([userId, isRevoked])
  @@index([userId, isUsed])
}

model RefreshTokenBlacklist {
  id        BigInt   @id @default(autoincrement())
  tokenHash String   @unique @db.VarChar(64)
  userId    BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  expiresAt DateTime @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
}

model ContactList {
  id          BigInt   @id @default(autoincrement())
  userId      BigInt
  contactId   BigInt
  displayName String?  @db.VarChar(64)
  phoneNumber String?  @db.VarChar(15)
  addedAt     DateTime @default(now()) @db.Timestamptz(3)
  flags       Int      @default(0) // blocked(1), favorite(2)

  user    User @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact User @relation("ContactOf", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([userId])
  @@index([contactId])
  @@index([flags])
}

model UserSettings {
  id     BigInt @id @default(autoincrement())
  userId BigInt @unique

  // Объединили настройки в JSON для экономии колонок
  // Структура: { theme: string, language: string, fontSize: number, animations: boolean }
  uiSettings    Json? // theme, language, fontSize, animations
  // Структура: { enabled: boolean, sound: boolean, vibration: boolean, types: string[] }
  notifications Json? // enabled, sound, vibration, types
  // Структура: { lastSeen: string, profilePhoto: string, status: string, messaging: string }
  privacy       Json? // lastSeen, profilePhoto, status, messaging
  // Структура: { biometric: boolean, twoFactor: boolean, sessionTimeout: number }
  security      Json? // biometric, twoFactor, sessionTimeout
  // Структура: { autoDownload: string, backup: boolean, quality: string }
  dataStorage   Json? // autoDownload, backup, quality settings
  // Структура: { autoplay: boolean, captions: boolean, recommendations: boolean }
  content       Json? // autoplay, captions, recommendations
  // Структура: { betaFeatures: string[], labs: boolean }
  experimental  Json? // beta features, labs
  blockedUsers  BigInt[] // Массив ID заблокированных пользователей

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ChatSettings {
  id       BigInt @id @default(autoincrement())
  chatId   BigInt @unique
  settings Json? // slowMode, maxMembers, joinApproval, autoDelete, etc.

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model NotificationSettings {
  id               BigInt   @id @default(autoincrement())
  userId           BigInt
  chatId           BigInt?
  notificationType String   @db.VarChar(32)
  flags            Int      @default(7) // enabled(1), sound(2), vibration(4)
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime @updatedAt @db.Timestamptz(3)

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat? @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId, notificationType])
  @@index([userId])
  @@index([chatId])
  @@index([notificationType])
}

// ===== ДОПОЛНИТЕЛЬНЫЕ МОДЕЛИ ДЛЯ ФОРУМА =====

// SEO и метаданные для форумных постов
model ForumPostSEO {
  id           BigInt  @id @default(autoincrement())
  postId       BigInt  @unique
  metaTitle    String? @db.VarChar(70) // Оптимальная длина для поисковиков
  metaDesc     String? @db.VarChar(160) // Оптимальная длина для поисковиков
  keywords     String? @db.VarChar(255)
  canonicalUrl String? @db.VarChar(500)
  ogImage      String? @db.VarChar(500)
  schema       Json? // Структурированные данные Schema.org

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  post ForumPost @relation("PostSEO", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

// Система репутации и ачивок
model ForumReputation {
  id     BigInt @id @default(autoincrement())
  userId BigInt
  points Int    @default(0)
  level  Int    @default(1)
  badges Json? // Массив значков пользователя

  // Статистика активности
  postsCreated    Int @default(0)
  repliesCreated  Int @default(0)
  likesReceived   Int @default(0)
  likesGiven      Int @default(0)
  bestAnswers     Int @default(0)
  moderationScore Int @default(0)

  lastCalculated DateTime @default(now()) @db.Timestamptz(3)

  user User @relation("UserReputation", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([points])
  @@index([level])
  @@index([lastCalculated])
}

// Кэш горячих тем
model ForumHotTopics {
  id       BigInt  @id @default(autoincrement())
  postId   BigInt
  score    Float // Алгоритмический скор популярности
  position Int // Позиция в рейтинге
  period   String  @db.VarChar(16) // hour, day, week, month
  region   String? @db.VarChar(8) // Опционально по регионам

  calculatedAt DateTime @default(now()) @db.Timestamptz(3)
  expiresAt    DateTime @db.Timestamptz(3)

  post ForumPost @relation("HotTopics", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, period, region])
  @@index([period, score])
  @@index([position, period])
  @@index([expiresAt])
}

// Расширенная аналитика форума
model ForumAnalytics {
  id         BigInt   @id @default(autoincrement())
  date       DateTime @db.Date
  forumId    BigInt? // Аналитика для всего форума
  categoryId BigInt? // Аналитика для конкретной категории

  // Метрики активности
  newPosts       Int @default(0)
  newReplies     Int @default(0)
  newUsers       Int @default(0)
  totalViews     Int @default(0)
  uniqueVisitors Int @default(0)
  avgSessionTime Int @default(0) // В секундах

  // Метрики вовлеченности
  likesGiven    Int @default(0)
  sharesCount   Int @default(0)
  searchQueries Int @default(0)

  // Модерация
  reportsCreated   Int @default(0)
  actionsPerformed Int @default(0)

  forum    Forum?         @relation("ForumAnalytics", fields: [forumId], references: [id])
  category ForumCategory? @relation("CategoryAnalytics", fields: [categoryId], references: [id])

  @@unique([date, forumId])
  @@unique([date, categoryId])
  @@index([date])
  @@index([forumId])
  @@index([categoryId])
  @@index([totalViews])
  @@index([uniqueVisitors])
}

// Система уведомлений форума
model ForumNotificationQueue {
  id         BigInt @id @default(autoincrement())
  userId     BigInt
  type       String @db.VarChar(32) // mention, reply, like, follow
  entityType String @db.VarChar(16) // post, reply, user
  entityId   BigInt

  // Настройки доставки
  isRead  Boolean @default(false)
  isEmail Boolean @default(false)
  isPush  Boolean @default(false)

  // Метаданные
  title   String @db.VarChar(128)
  message String @db.VarChar(255)
  data    Json? // Дополнительные данные

  // Временные метки
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  sentAt    DateTime? @db.Timestamptz(3)
  readAt    DateTime? @db.Timestamptz(3)

  user User @relation("ForumNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@index([isRead, sentAt])
  @@index([entityType, entityId])
}

// ===== КЭШИРОВАНИЕ И АНАЛИТИКА =====

model ChatStatsCache {
  chatId           BigInt    @id
  messageCount     Int       @default(0)
  participantCount Int       @default(0)
  lastActivity     DateTime? @db.Timestamptz(3)
  storageBytes     BigInt    @default(0)
  lastUpdated      DateTime  @default(now()) @db.Timestamptz(3)

  @@index([lastActivity])
  @@index([lastUpdated])
}

model UserStatsCache {
  userId        BigInt    @id
  messagesSent  Int       @default(0)
  chatsCount    Int       @default(0)
  contactsCount Int       @default(0)
  storageUsed   BigInt    @default(0)
  lastActivity  DateTime? @db.Timestamptz(3)
  lastUpdated   DateTime  @default(now()) @db.Timestamptz(3)

  @@index([lastActivity])
  @@index([lastUpdated])
}

model ContentStatsCache {
  contentId    BigInt   @id
  hourlyViews  Json? // Почасовая статистика просмотров
  dailyViews   Json? // Ежедневная статистика
  demographics Json? // Демография аудитории
  engagement   Json? // Метрики вовлеченности
  revenue      Json? // Данные о доходах
  lastUpdated  DateTime @default(now()) @db.Timestamptz(3)

  @@index([lastUpdated])
}

// ===== АРХИВИРОВАНИЕ =====

model MessageArchive {
  id              BigInt      @id @default(autoincrement())
  originalId      BigInt
  chatId          BigInt
  senderId        BigInt
  content         Bytes
  messageType     MessageType
  createdAt       DateTime    @db.Timestamptz(3)
  archiveDate     DateTime    @default(now()) @db.Timestamptz(3)
  compressionType String      @default("gzip") @db.VarChar(16)

  @@index([chatId, createdAt])
  @@index([originalId])
  @@index([archiveDate])
}

model ContentArchive {
  id              BigInt      @id @default(autoincrement())
  originalId      BigInt
  authorId        BigInt
  type            ContentType
  metadata        Json // Архивированные метаданные
  archiveDate     DateTime    @default(now()) @db.Timestamptz(3)
  archiveReason   String      @db.VarChar(64) // deleted, expired, compliance
  compressionType String      @default("gzip") @db.VarChar(16)

  @@index([originalId])
  @@index([authorId])
  @@index([type])
  @@index([archiveDate])
}

// ===== ПОИСКОВЫЙ КЭШИ =====

model SearchCache {
  queryHash String   @id @db.VarChar(32)
  results   Json
  expiresAt DateTime @db.Timestamptz(3)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  hitCount  Int      @default(1)

  @@index([expiresAt])
  @@index([hitCount])
  @@index([createdAt])
}

model TrendingCache {
  id        BigInt   @id @default(autoincrement())
  type      String   @db.VarChar(32) // tags, creators, content
  data      Json // Трендовые данные
  region    String?  @db.VarChar(8) // Географический регион
  expiresAt DateTime @db.Timestamptz(3)
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([type])
  @@index([region])
  @@index([expiresAt])
}
