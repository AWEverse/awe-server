model PrivateChat {
  chat_id      BigInt    @id @default(autoincrement())
  folder_id    BigInt
  is_muted     Boolean   @default(false)
  mute_until   DateTime?
  is_blocked   Boolean   @default(false)
  unread_count Int       @default(0)
  last_message_id BigInt?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  folder       ChatFolder @relation(fields: [folder_id], references: [folder_id], onDelete: Cascade)
  members      PrivateMember[]
  messages     PrivateMessage[]
  attachments  PrivateMessageAttachment[]
  last_message PrivateMessage? @relation("LastMessage", fields: [last_message_id], references: [msg_id])

  @@index([folder_id])
  @@index([last_message_id])
}

model PrivateMember {
  member_id    BigInt    @id @default(autoincrement())
  user_id      BigInt
  chat_id      BigInt
  is_admin     Boolean   @default(false)
  joined_at    DateTime  @default(now())
  last_seen    DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat         PrivateChat @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)

  @@index([user_id])
  @@index([chat_id])
  @@unique([user_id, chat_id])
}

model PrivateMessage {
  msg_id        BigInt    @id @default(autoincrement())
  msg_reply_id  BigInt?
  user_id       BigInt
  chat_id       BigInt
  encrypted_body String
  is_pinned     Boolean   @default(false)
  is_edited     Boolean   @default(false)
  is_forwarded  Boolean   @default(false)
  forward_from_id BigInt?
  views         Int       @default(0)
  is_read       Boolean   @default(false)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  reply         PrivateMessage? @relation("ReplyTo", fields: [msg_reply_id], references: [msg_id])
  replies       PrivateMessage[] @relation("ReplyTo")
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat          PrivateChat @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  forwarded_from User?     @relation("ForwardedFrom", fields: [forward_from_id], references: [id])
  reactions     PrivateMessageReaction[]
  attachments   PrivateMessageAttachment[]
  last_message_chats PrivateChat[] @relation("LastMessage")

  @@index([user_id])
  @@index([chat_id])
  @@index([msg_reply_id])
  @@index([is_pinned, chat_id])
  @@index([chat_id, created_at])
}

model PrivateMessageReaction {
  reaction_id BigInt    @id @default(autoincrement())
  msg_id      BigInt
  user_id     BigInt
  emoji_id    BigInt
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  message     PrivateMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  emoji       CustomEmoji @relation(fields: [emoji_id], references: [emoji_id], onDelete: Cascade)

  @@index([msg_id])
  @@index([user_id])
  @@index([emoji_id])
  @@unique([msg_id, user_id, emoji_id])
}

model PrivateMessageAttachment {
  attach_id    BigInt        @id @default(autoincrement())
  msg_id       BigInt
  user_id      BigInt
  chat_id      BigInt
  sticker_id   BigInt?
  gif_id       BigInt?
  attach_type  AttachmentType
  attach_path  String
  file_size    BigInt?
  width        Int?
  height       Int?
  duration     Int?
  mime_type    String?
  caption      String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  message      PrivateMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat         PrivateChat   @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  sticker      Sticker?      @relation(fields: [sticker_id], references: [sticker_id])
  gif          Gif?          @relation(fields: [gif_id], references: [gif_id])

  @@index([msg_id])
  @@index([user_id])
  @@index([chat_id])
  @@index([sticker_id])
  @@index([gif_id])
}