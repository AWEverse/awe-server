model ChannelChat {
  chat_id           BigInt    @id @default(autoincrement())
  folder_id         BigInt
  channel_name      String    @db.VarChar(128)
  username          String?   @unique @db.VarChar(32)
  about             String?   @db.VarChar(255)
  photo_path        String?
  is_public         Boolean   @default(false)
  invite_link       String?   @unique
  creator_id        BigInt
  is_verified       Boolean   @default(false)
  is_scam           Boolean   @default(false)
  slow_mode_seconds Int       @default(0)
  join_requests     Boolean   @default(false)
  signatures_enabled Boolean  @default(false)
  deleted_at        DateTime? // Убрано is_deleted, используем только deleted_at
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  folder            ChatFolder           @relation(fields: [folder_id], references: [folder_id], onDelete: Cascade)
  creator           User               @relation("ChannelCreator", fields: [creator_id], references: [id], onDelete: Restrict)
  members           ChannelMember[]
  messages          ChannelMessage[]
  attachments       ChannelMessageAttachment[]
  sponsoredMessages SponsoredMessage[] // Исправлено имя поля
  discussionGroups  DiscussionGroup[]  @relation("DiscussionGroup")
  stickerSets       ChannelStickerSet[]
  readMessages      ChannelReadMessage[]
  activityLogs      ChannelActivityLog[]

  @@index([folder_id])
  @@index([username])
  @@index([creator_id])
  @@index([deleted_at])
}

model ChannelMember {
  member_id    BigInt       @id @default(autoincrement())
  chat_id      BigInt
  user_id      BigInt
  is_admin     Boolean      @default(false)
  status       MemberStatus @default(ACTIVE) // Убрано is_banned и ban_until
  joined_at    DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  chat         ChannelChat         @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user         User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rights       ChannelMemberRights?
  readMessages ChannelReadMessage[]

  @@unique([chat_id, user_id])
  @@index([chat_id])
  @@index([user_id])
  @@index([is_admin])
  @@index([status])
}

model ChannelMemberRights {
  id                  BigInt    @id @default(autoincrement())
  member_id           BigInt    @unique
  can_post_messages   Boolean   @default(false)
  can_edit_messages   Boolean   @default(false)
  can_delete_messages Boolean   @default(false)
  can_invite_users    Boolean   @default(false)
  can_restrict_members Boolean  @default(false)
  can_pin_messages    Boolean   @default(false)
  can_manage_chat     Boolean   @default(false)
  can_send_media      Boolean   @default(true)
  can_send_polls      Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  member              ChannelMember @relation(fields: [member_id], references: [member_id], onDelete: Cascade)

  @@index([member_id])
}

enum MemberStatus {
  ACTIVE
  PENDING
  LEFT
  BANNED
}

model ChannelMessage {
  msg_id        BigInt    @id @default(autoincrement())
  msg_reply_id  BigInt?
  chat_id       BigInt
  user_id       BigInt
  encrypted_body String   @db.VarChar(4096)
  group_id      BigInt?
  is_pinned     Boolean   @default(false)
  is_edited     Boolean   @default(false)
  signature     String?   @db.VarChar(100)
  views         Int       @default(0)
  forwards      Int       @default(0)
  deleted_at    DateTime? // Убрано is_deleted
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  reply         ChannelMessage?       @relation("ReplyTo", fields: [msg_reply_id], references: [msg_id], onDelete: SetNull)
  replies       ChannelMessage[]      @relation("ReplyTo")
  chat          ChannelChat          @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user          User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reactions     ChannelMessageReaction[]
  attachments   ChannelMessageAttachment[]
  sponsoredMessages SponsoredMessage[]
  readMessages  ChannelReadMessage[]

  @@index([chat_id])
  @@index([user_id])
  @@index([msg_reply_id])
  @@index([is_pinned, chat_id])
  @@index([chat_id, created_at])
  @@index([group_id])
  @@index([views])
  @@index([deleted_at])
}

model ChannelMessageReaction {
  reaction_id BigInt    @id @default(autoincrement())
  msg_id      BigInt
  user_id     BigInt
  emoji_id    BigInt
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  message     ChannelMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)
  user        User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  emoji       CustomEmoji    @relation(fields: [emoji_id], references: [emoji_id], onDelete: Cascade)

  @@unique([msg_id, user_id, emoji_id])
  @@index([msg_id])
  @@index([user_id])
  @@index([emoji_id])
}

model ChannelMessageAttachment {
  attach_id     BigInt        @id @default(autoincrement())
  msg_id        BigInt
  user_id       BigInt
  chat_id       BigInt
  gif_id        BigInt?
  attach_type   AttachmentType
  attach_path   String
  mime_type     String?       @db.VarChar(100)
  caption       String?       @db.Text
  file_size     Int?
  duration      Int?
  thumbnail_path String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  message       ChannelMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat          ChannelChat   @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  gif           Gif?          @relation(fields: [gif_id], references: [gif_id], onDelete: SetNull)

  @@index([msg_id])
  @@index([user_id])
  @@index([chat_id])
  @@index([gif_id])
  @@index([attach_type])
}

model ChannelReadMessage {
  id         BigInt    @id @default(autoincrement())
  chat_id    BigInt
  user_id    BigInt
  msg_id     BigInt
  read_at    DateTime  @default(now())

  chat       ChannelChat    @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user       ChannelMember  @relation(fields: [user_id], references: [member_id], onDelete: Cascade)
  message    ChannelMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)

  @@unique([chat_id, user_id, msg_id])
  @@index([chat_id])
  @@index([user_id])
  @@index([msg_id])
}

model ChannelActivityLog {
  log_id     BigInt    @id @default(autoincrement())
  chat_id    BigInt
  user_id    BigInt
  action     String    @db.VarChar(100)
  details    Json?
  created_at DateTime  @default(now())

  chat       ChannelChat @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([chat_id])
  @@index([user_id])
  @@index([created_at])
}

model SponsoredMessage {
  sponsored_id BigInt    @id @default(autoincrement())
  chat_id      BigInt
  msg_id       BigInt    @unique
  views        Int       @default(0)
  created_at   DateTime  @default(now())
  expires_at   DateTime?

  chat         ChannelChat    @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  message      ChannelMessage @relation(fields: [msg_id], references: [msg_id], onDelete: Cascade)

  @@index([chat_id])
  @@index([msg_id])
  @@index([expires_at])
}

model DiscussionGroup {
  group_id   BigInt    @id @default(autoincrement())
  chat_id    BigInt    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  chat       ChannelChat @relation("DiscussionGroup", fields: [chat_id], references: [chat_id], onDelete: Cascade)
}

model ChannelStickerSet {
  set_id        BigInt    @id @default(autoincrement())
  chat_id       BigInt    @unique
  sticker_set_id String   @db.VarChar(64)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  chat          ChannelChat @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)

  @@index([chat_id])
}
